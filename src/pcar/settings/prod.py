"""
Django settings for pcar project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import environ
import datetime

from pathlib import Path

from firebase_admin import initialize_app as initialize_firebase_app

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env(
    AWS_ACCESS_KEY_ID=(None, None),
    AWS_SECRET_ACCESS_KEY=(None, None),
)

env.read_env(
    env_file=os.path.join(BASE_DIR, '.env')
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '913c+9@v$450db90)d55ua=9qw73wvxtf)46db0+%@*4+i7j-3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'api.bridcar.com',
]


CSRF_TRUSTED_ORIGINS = [
    'https://api.bridcar.com',
    'https://control-room.bridcar.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django.forms',
    'django_crontab',
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'django_extensions',
    'phonenumber_field',
    'ckeditor',
    'ckeditor_uploader',
    'rangefilter',
    'django_filters',
    'multiselectfield',
    'admin_reorder',
    'dynamic_raw_id',
    'import_export',
    'fcm_django',
    'django_telegram_logging',
    'nested_admin',
    'users',
    'locations',
    'vehicles',
    'requestings',
    'notifications',
    'boards',
    'daangn',
]

AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

ADMIN_REORDER = (
    'sites',
    {
        'app': 'users',
        'label': '인증관리',
        'models': (
            'users.DealerCompany', 'users.Dealer', 'users.Agent', 'users.ControlRoomUser', \
            'users.SMSAuthenticationHistory', 'users.BalanceHistory', 'users.WithdrawalRequesting',
        ),
    },
    {
        'app': 'vehicles',
        'label': '차량',
        'models': ('vehicles.Car',),
    },
    {
        'app': 'requestings',
        'label': '의뢰',
        'models': (
            'requestings.RequestingHistory', 'requestings.FinishedRequestingHistory', 'requestings.RequestingSettlement', \
            'requestings.RefererSettlement', 'requestings.BulkRequesting', 'requestings.ExternalEvaluationTemplate', 'requestings.Review', \
            'requestings.DeliveryRegionDivision', 'requestings.DeliveryFeeRelation',
        ),
    },
    {
        'app': 'requestings',
        'label': '당근마켓 의뢰',
        'models': (
            'requestings.DaangnRequestingHistory', 'requestings.FinishedDaangnRequestingHistory', 'requestings.DaangnRequestingSettlement',
        ),
    },
    {
        'app': 'notifications',
        'label': '알림',
        'models': (
            'notifications.Notification',
        ),
    },
    {
        'app': 'boards',
        'label': '게시판',
        'models': (
            'boards.Agreement',
        ),
    },
)

ROOT_URLCONF = 'pcar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'pcar.helpers.custom_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.middlewares.UserAuthenticationMiddleware',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

SPECTACULAR_SETTINGS = {
    'VERSION': '1.0.0',
    'SCHEMA_PATH_PREFIX': '/v[0-9]/',
    'SERVE_INCLUDE_SCHEMA': False,
    'TITLE': '평카인 Ver2. 황금올리브 에디션',
    'COMPONENT_SPLIT_REQUEST': True,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=90),
    'ROTATE_REFRESH_TOKENS': True,
}

CORS_ALLOWED_ORIGINS = [
    'https://control-room.bridcar.com',
]

WSGI_APPLICATION = 'pcar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USERNAME'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': ''
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'encoding': 'utf-8',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/home/api-server/logs/api-server.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'telegram': {
            'level': 'ERROR',
            'class': 'django_telegram_logging.handler.TelegramHandler'
        },
    },
    'loggers': {
        'django': {
            'handlers': [ 'file', 'telegram', ],
            'level': 'INFO',
        },
    }
}

TELEGRAM_LOGGING_TOKEN = env('TELEGRAM_LOGGING_TOKEN')
TELEGRAM_LOGGING_CHAT = env('TELEGRAM_LOGGING_CHAT_ID')
TELEGRAM_LOGGING_EMIT_ON_DEBUG = env('TELEGRAM_LOGGING_EMIT_ON_DEBUG')

# CRONJOBS

CRONJOBS = [
    ('0,5,10,15,20,25,30,35,40,45,50,55 * * * *', 'requestings.crons.notify_starting_soon_requestings', '>> /home/api-server/logs/notify_starting_soon_requestings.log'),
    ('*/1 * * * *', 'requestings.crons.check_delayed_delivery_working', '>> /home/api-server/logs/check_delayed_delivery_working.log'),
    ('*/2 * * * *', 'notifications.crons.reminding_created_requesting', '>> /home/api-server/logs/reminding_created_requesting.log'),
    ('0 0 * * *', 'notifications.crons.delete_old_created_reminding_notifications', '>> /home/api-server/logs/delete_old_created_reminding_notifications.log'),
    ('0 */1 * * *', 'daangn.crons.notify_when_estimated_service_date_modifiable', '>> /home/api-server/logs/notify_when_estimated_service_date_modifiable.log'),
]


FCM_DJANGO_SETTINGS = {
    'ONE_DEVICE_PER_USER': True,
    'DELETE_INACTIVE_DEVICES': True,
    'UPDATE_ON_DUPLICATE_REG_ID': True,
}


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

PUBLIC_URL = 'https://api.bridcar.com'

STATIC_URL = '/statics/'
STATIC_ROOT = '/statics/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'pcar/statics'),
)

MEDIA_URL = 'https://media.bridcar.com/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'pcar/files')

CKEDITOR_UPLOAD_PATH = 'wysiwyg_uploads/'

DEFAULT_FILE_STORAGE = 'pcar.storages.CustomS3Boto3Storage'
FILE_UPLOAD_MAX_MEMORY_SIZE = 512000000

X_FRAME_OPTIONS = 'SAMEORIGIN'

PHONENUMBER_DEFAULT_REGION = 'KR'
PHONENUMBER_DEFAULT_FORMAT = 'NATIONAL'

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'bridcar-media'
AWS_S3_CUSTOM_DOMAIN = 'media.bridcar.com'
AWS_S3_URL_PROTOCOL = 'https'
AWS_S3_REGION_NAME = 'ap-northeast-2'

GOOGLE_APPLICATION_CREDENTIALS = \
    os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')

KAKAO_API_KEY = env('KAKAO_API_KEY')

CARHISTORY_ID = env('CARHISTORY_ID')
CARHISTORY_PASSWORD = env('CARHISTORY_PASSWORD')

CHANNEL_TALK_MEMBER_SECRET_KEY = env('CHANNEL_TALK_MEMBER_SECRET_KEY')
CHANNEL_TALK_API_ENDPOINT = env('CHANNEL_TALK_API_ENDPOINT')
CHANNEL_TALK_API_ACCESS_KEY = env('CHANNEL_TALK_API_ACCESS_KEY')
CHANNEL_TALK_API_SECRET = env('CHANNEL_TALK_API_SECRET')
CHANNEL_TALK_GROUP_ID_FOR_NOTIFICATION = env('CHANNEL_TALK_GROUP_ID_FOR_NOTIFICATION')

NHN_CLOUD_API_END_POINT = env('NHN_CLOUD_API_END_POINT')
NHN_CLOUD_ALIMTALK_SENDER_KEY= env('NHN_CLOUD_ALIMTALK_SENDER_KEY')
NHN_CLOUD_ALIMTALK_APPKEY = env('NHN_CLOUD_ALIMTALK_APPKEY')
NHN_CLOUD_ALIMTALK_SECRET_KEY = env('NHN_CLOUD_ALIMTALK_SECRET_KEY')

initialize_firebase_app()
