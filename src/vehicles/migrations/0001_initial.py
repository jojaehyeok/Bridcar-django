# Generated by Django 4.0.6 on 2022-09-15 15:33

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pcar.helpers
import uuid
import vehicles.models.car
import vehicles.models.evaluation
import vehicles.models.evaluation_sheet
import vehicles.models.performance_check_record


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('requestings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('number', models.CharField(max_length=36, verbose_name='차량번호')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='차종')),
                ('classification', models.CharField(blank=True, choices=[('오토', '오토'), ('스틱', '스틱'), ('대형', '대형'), ('화물', '화물'), ('렉카', '렉카'), ('추레라', '추레라'), ('캠핑카', '캠핑카')], max_length=10, null=True, verbose_name='차량 분류')),
                ('mileage', models.PositiveBigIntegerField(default=0, verbose_name='주행거리')),
                ('color', models.CharField(blank=True, max_length=100, null=True, verbose_name='차량 색상')),
                ('registration_image', models.ImageField(blank=True, null=True, upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.car.image_path_getter, filename_prefix='registration-image', use_uuid_name=True), verbose_name='차량 등록증 이미지')),
                ('instrument_panel_image', models.ImageField(blank=True, null=True, upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.car.image_path_getter, filename_prefix='instrument-panel-image', use_uuid_name=True), verbose_name='계기판 이미지')),
                ('identification_number_image', models.ImageField(blank=True, null=True, upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.car.image_path_getter, filename_prefix='identification-number-image', use_uuid_name=True), verbose_name='차대번호 라벨')),
                ('back_image', models.ImageField(blank=True, null=True, upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.car.image_path_getter, filename_prefix='back-image', use_uuid_name=True), verbose_name='차량 후방 이미지')),
                ('requesting_history', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car', to='requestings.requestinghistory', verbose_name='해당 차량의 의뢰')),
            ],
            options={
                'verbose_name': '자동차',
                'verbose_name_plural': '자동차 목록',
                'db_table': 'cars',
            },
        ),
        migrations.CreateModel(
            name='CarhistoryAccidentInsuranceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance_at', models.DateField(verbose_name='보험처리 날짜')),
                ('total_cost', models.PositiveIntegerField(default=0, verbose_name='총 보험처리 금액')),
                ('parts_cost', models.PositiveIntegerField(default=0, verbose_name='부품 금액')),
                ('labor_cost', models.PositiveIntegerField(default=0, verbose_name='공임 비용')),
                ('painting_cost', models.PositiveIntegerField(default=0, verbose_name='도장 비용')),
            ],
            options={
                'verbose_name': '사고 보험처리 목록',
                'verbose_name_plural': '사고 보험처리 목록 내역',
                'db_table': 'carhistory_accident_insurance_histories',
            },
        ),
        migrations.CreateModel(
            name='PerformanceCheckRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.performance_check_record.file_path_getter, use_uuid_name=True), verbose_name='성능점검기록부 파일')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_check_records', to='vehicles.car')),
            ],
            options={
                'verbose_name': '성능점검기록부',
                'verbose_name_plural': '성능점검기록부 목록',
                'db_table': 'performance_check_records',
            },
        ),
        migrations.CreateModel(
            name='CarhistoryResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scrapping_at', models.DateTimeField(verbose_name='스크래핑 한 시각')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='에러메시지 (스크래핑 에러 발생시)')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='carhistory_result', to='vehicles.car', verbose_name='대상 차량')),
                ('insurance_with_my_damages', models.ManyToManyField(blank=True, null=True, related_name='carhistory_as_my_damage', to='vehicles.carhistoryaccidentinsurancehistory', verbose_name='내 차 사고 발생 내역')),
                ('insurance_with_opposite_damages', models.ManyToManyField(blank=True, null=True, related_name='carhistory_as_opposite_damage', to='vehicles.carhistoryaccidentinsurancehistory', verbose_name='상대 차 사고 발생 내역')),
            ],
            options={
                'verbose_name': '카히스토리 조회 결과',
                'verbose_name_plural': '카히스토리 조회 결과 목록',
                'db_table': 'carhistory_results',
            },
        ),
        migrations.CreateModel(
            name='CarhistoryOwnerChangeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateField(verbose_name='변경 시기')),
                ('changing_type', models.CharField(max_length=30, verbose_name='변경 구분')),
                ('changed_car_number', models.CharField(max_length=30, verbose_name='변경 후 차량 번호')),
                ('changing_usage', models.CharField(max_length=30, verbose_name='변경 후 차량 용도')),
                ('carhistory_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_change_histories', to='vehicles.carhistoryresult', verbose_name='대상 카히스토리 결과')),
            ],
            options={
                'verbose_name': '소유자 변경 내역',
                'verbose_name_plural': '소유자 변경 내역 목록',
                'db_table': 'carhistory_owner_change_histories',
            },
        ),
        migrations.CreateModel(
            name='CarEvaluationSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.evaluation_sheet.image_path_getter, 'car_evaluation_sheets'), verbose_name='평가지 파일')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_sheets', to='vehicles.car')),
            ],
            options={
                'verbose_name': '진단 평가지',
                'verbose_name_plural': '진단평가지 목록',
                'db_table': 'car_evaluation_sheets',
            },
        ),
        migrations.CreateModel(
            name='CarEvaluationResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, max_length=100, null=True, verbose_name='차량 색상')),
                ('mileage', models.PositiveBigIntegerField(default=0, verbose_name='주행거리')),
                ('general_key_counts', models.IntegerField(default=0, verbose_name='일반 차키 갯수')),
                ('folding_key_counts', models.IntegerField(default=0, verbose_name='폴딩 차키 갯수')),
                ('special_key_counts', models.IntegerField(default=0, verbose_name='특수 차키 갯수')),
                ('required_exterior_paint_counts', models.IntegerField(default=0, verbose_name='필요 외판 도색')),
                ('wheel_scratch_counts', models.IntegerField(default=0, verbose_name='휠기스')),
                ('remaining_front_tire', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='앞 타이어 잔존량')),
                ('remaining_rear_tire', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='뒤 타이어 잔존량')),
                ('statuses', models.JSONField(default=[[]], verbose_name='자동차 상태 (외판체크)')),
                ('have_instrument_panel_warning', models.BooleanField(default=False, verbose_name='계기판 경고등 있음')),
                ('have_engine_check_light', models.BooleanField(default=False, verbose_name='엔진 체크등 점등')),
                ('have_airbag_warning_light', models.BooleanField(default=False, verbose_name='에어백 경고등 점등')),
                ('have_option_malfunction', models.BooleanField(default=False, verbose_name='옵션 기능 작동 이상')),
                ('have_leakage', models.BooleanField(default=False, verbose_name='누유 있음')),
                ('have_abnormal_while_driving', models.BooleanField(default=False, verbose_name='주행중 이상 증상')),
                ('estimated_recovery_cost', models.PositiveIntegerField(blank=True, null=True, verbose_name='예상 복구 비용')),
                ('side_mirror_cover_marker', models.JSONField(blank=True, null=True, verbose_name='사이드 미러 덮개 데미지')),
                ('side_mirror_mirror_marker', models.JSONField(blank=True, null=True, verbose_name='사이드 미러 거울 데미지')),
                ('side_mirror_repeater_marker', models.JSONField(blank=True, null=True, verbose_name='사이드 미러 리피터 데미지')),
                ('memo', models.TextField(blank=True, max_length=1000, null=True, verbose_name='기타 의견')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_result', to='vehicles.car', verbose_name='대상 차량')),
            ],
            options={
                'verbose_name': '진단 평가',
                'verbose_name_plural': '진단 평가 목록',
                'db_table': 'car_evaluation_results',
            },
        ),
        migrations.CreateModel(
            name='CarEvaluationImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(max_length=256, verbose_name='이미지 ID (Picker 라이브러리 id)')),
                ('image', models.ImageField(upload_to=pcar.helpers.PreprocessUploadPath(vehicles.models.evaluation.car_evaluation_image_path_getter, use_uuid_name=True), verbose_name='이미지')),
                ('evaluation_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='vehicles.carevaluationresult', verbose_name='대상 차량 평가')),
            ],
            options={
                'verbose_name': '차량 평가 사진',
                'verbose_name_plural': '차량 평가 사진 목록',
                'db_table': 'car_evaluation_images',
            },
        ),
    ]
